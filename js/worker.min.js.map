{"version":3,"file":"worker.min.js","sources":["CPU/CPU-test-event.js","common/utils.js","CPU/worker.js","common/score.js"],"sourcesContent":["export const START_TEST = 0;\nexport const STOP_TEST = 1;\nexport const RESULT_SUCCESS = 2;\nexport const RESULT_FAILED = 3;\nexport const TEST_RUNNING = 4;\nexport const TEST_STOPPED = 5;\nexport const WORKER_READY = 6;","\nexport const isFunction = func => (typeof func) === \"function\";\n\nexport const isAbsent = value => (value === undefined) || (value === null);\n\n// For array, set or map-like objects\nexport const isEmpty = value => (value.size === 0) || (value.length === 0);\n\n/**\n * Shallow immutability for pure data carriers. Use sparingly.\n */\nexport const Î¾ = anyObj => Object.freeze(Object.assign(Object.create(null), anyObj));\n\n// Unclamped setTimeout using MessageChannel (For throttling behaviour: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Notes)\n// Creates \"macro\" tasks, which plays nicer with the main UI thread: (For macro/micro distinction: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/queueMicrotask)\nconst channel = new MessageChannel();\nconst receiver = channel.port1;\nconst sender = channel.port2;\n\n// In an earlier project, I've tested that map here is faster than array or plain objects in both Firefox and Chrome.\n// Not sure if it's still true, but the difference wasn't big.\nconst queuedTasks = new Map();\nlet nextTaskID = 0;\n\nreceiver.onmessage = event => {\n\tconst taskID = event.data;\n\tif (queuedTasks.has(taskID)) {\n\t\t// Run if not cancelled\n\t\tconst task = queuedTasks.get(taskID);\n\t\tqueuedTasks.delete(taskID);\n\t\ttask();\n\t}\n};\n\n/**\n * @returns The id of the given task, which can be used to cancel that task\n */\nexport const queueTask = func => {\n\tif (!isFunction(func)) {\n\t\tthrow new Error(\"Not a function\");\n\t}\n\n\tconst currentID = nextTaskID;\n\t++nextTaskID;\n\tqueuedTasks.set(currentID, func);\n\tsender.postMessage(currentID);\n\n\treturn currentID;\n};\n\n/**\n * @returns True if the task was in the queue and is now removed, false if the id doesn't correspond to any tasks in the queue\n */\nexport const cancelTask = taskID => queuedTasks.delete(taskID);","// Firefox currently doesn't support modules in web workers yet, so\n// emscripten is compiling to non module code. Relying on rollup+terser\n// to remove all other module imports.\nimportScripts(\"WasmTest.js\");\n\nimport { START_TEST, TEST_STOPPED, TEST_RUNNING, STOP_TEST, WORKER_READY } from \"./CPU-test-event.js\";\nimport { queueTask, cancelTask } from \"../common/utils.js\";\nimport { SlidingWindowScoring } from \"../common/score.js\";\n\nclass CPUTestScore extends SlidingWindowScoring {\n\tconstructor() {\n\t\tsuper(3);\n\t}\n\n\tstatic newInitialValue() {\n\t\treturn {\n\t\t\tduration: 0,\n\t\t\titeration: 0,\n\t\t};\n\t}\n\n\tstatic accumulate(accumulator, currentElement) {\n\t\taccumulator.duration += currentElement.score.duration;\n\t\taccumulator.iteration++;\n\t\treturn accumulator;\n\t}\n\n\tgetNewScore(loopStartTime, loopEndTime) {\n\t\t// In minutes\n\t\tconst loopDuration = (loopEndTime - loopStartTime) / 1000 / 60;\n\t\tthis.addScore({ duration: loopDuration }, loopEndTime);\n\t\tconst score = this.calculateScore(loopEndTime);\n\t\t// Score is loops per minute in the last 3 minutes\n\t\treturn score.iteration / score.duration;\n\t}\n}\n\nself.Module().then(WasmTest => {\n\n\tlet testStatus = TEST_STOPPED;\n\tlet testTaskId = undefined;\n\tlet testScoring = new CPUTestScore();\n\n\tconst testFunction = () => {\n\t\tif (testStatus === TEST_RUNNING) {\n\t\t\tconst startTime = performance.now();\n\t\t\tconst result = WasmTest._runTest();\n\t\t\tconst endTime = performance.now();\n\t\t\tconst score = testScoring.getNewScore(startTime, endTime);\n\t\t\ttestTaskId = queueTask(testFunction);\n\t\t\tpostMessage({\n\t\t\t\tstate: testStatus,\n\t\t\t\tscore: score,\n\t\t\t\t// It's highly unlikely that any compiler will optimize across thread boundaries.\n\t\t\t\t// This guarantees that the test won't be optimized away by a future compiler\n\t\t\t\t// that can optimize across JS/WASM boundary.\n\t\t\t\tresult: result,\n\t\t\t});\n\t\t}\n\t};\n\n\tself.addEventListener(\"message\", e => {\n\t\tif ((e.data === START_TEST) && testStatus !== TEST_RUNNING) {\n\t\t\ttestStatus = TEST_RUNNING;\n\t\t\ttestScoring = new CPUTestScore();\n\t\t\ttestTaskId = queueTask(testFunction);\n\t\t}\n\t\tif ((e.data === STOP_TEST) && testStatus === TEST_RUNNING) {\n\t\t\ttestStatus = TEST_STOPPED;\n\t\t\tcancelTask(testTaskId);\n\t\t\ttestTaskId = undefined;\n\t\t}\n\t});\n\n\tpostMessage({\n\t\tstate: WORKER_READY,\n\t});\n});\n","import { isEmpty } from \"./utils.js\";\n\nexport class SlidingWindowScoring {\n\tscores = [];\n\t/**\n\t * By default 1 minute window\n\t */\n\tconstructor(timeFrame = 1) {\n\t\t// perf.now is in milliseconds\n\t\tthis.maxDiff = timeFrame * 60 * 1000;\n\t}\n\n\taddScore(newScore, now = performance.now()) {\n\t\tthis.scores.push({\n\t\t\ttime: now,\n\t\t\tscore: newScore,\n\t\t});\n\t}\n\n\tstatic newInitialValue() { return 0; }\n\n\tstatic accumulate() { return 0; }\n\n\tcalculateScore(now = performance.now()) {\n\t\twhile ((!isEmpty(this.scores)) && (!this.isInsideSlidingWindow(this.scores[0].time, now))) {\n\t\t\tthis.scores.shift();\n\t\t}\n\t\t// Call subclass version of these functions\n\t\tconst initialValue = this.constructor.newInitialValue();\n\t\treturn this.scores.reduce(this.constructor.accumulate, initialValue);\n\t}\n\n\tisInsideSlidingWindow(timeStamp, now) {\n\t\t// perf.now is in milliseconds\n\t\tconst diff = now - timeStamp;\n\t\treturn diff < this.maxDiff;\n\t}\n};"],"names":["channel","MessageChannel","receiver","port1","sender","port2","queuedTasks","Map","nextTaskID","onmessage","event","taskID","data","has","task","get","delete","queueTask","func","isFunction","Error","currentID","set","postMessage","importScripts","CPUTestScore","[object Object]","timeFrame","this","maxDiff","newScore","now","performance","scores","push","time","score","value","size","length","isInsideSlidingWindow","shift","initialValue","constructor","newInitialValue","reduce","accumulate","timeStamp","super","duration","iteration","accumulator","currentElement","loopStartTime","loopEndTime","loopDuration","addScore","calculateScore","self","Module","then","WasmTest","testStatus","testTaskId","undefined","testScoring","testFunction","startTime","result","_runTest","endTime","getNewScore","state","addEventListener","e"],"mappings":"AAAO,MCeDA,EAAU,IAAIC,eACdC,EAAWF,EAAQG,MACnBC,EAASJ,EAAQK,MAIjBC,EAAc,IAAIC,IACxB,IAAIC,EAAa,EAEjBN,EAASO,UAAYC,IACpB,MAAMC,EAASD,EAAME,KACrB,GAAIN,EAAYO,IAAIF,GAAS,CAE5B,MAAMG,EAAOR,EAAYS,IAAIJ,GAC7BL,EAAYU,OAAOL,GACnBG,MAOK,MAAMG,EAAYC,IACxB,IArCyBA,CAAAA,GAA0B,mBAAVA,EAqCpCC,CAAWD,GACf,MAAM,IAAIE,MAAM,kBAGjB,MAAMC,EAAYb,EAKlB,QAJEA,EACFF,EAAYgB,IAAID,EAAWH,GAC3Bd,EAAOmB,YAAYF,GAEZA,GC5CRG,cAAc,eAMd,MAAMC,UCPC,MACNC,OAAS,GAITA,YAAYC,EAAY,GAEvBC,KAAKC,QAAsB,GAAZF,EAAiB,IAGjCD,SAASI,EAAUC,EAAMC,YAAYD,OACpCH,KAAKK,OAAOC,KAAK,CAChBC,KAAMJ,EACNK,MAAON,IAITJ,yBAA2B,OAAO,EAElCA,oBAAsB,OAAO,EAE7BA,eAAeK,EAAMC,YAAYD,OAChC,KFlB8C,KAAzBM,EEkBJT,KAAKK,QFlBeK,MAAiC,IAAjBD,EAAME,SEkBvBX,KAAKY,sBAAsBZ,KAAKK,OAAO,GAAGE,KAAMJ,IACnFH,KAAKK,OAAOQ,QFnBQJ,IAAAA,EEsBrB,MAAMK,EAAed,KAAKe,YAAYC,kBACtC,OAAOhB,KAAKK,OAAOY,OAAOjB,KAAKe,YAAYG,WAAYJ,GAGxDhB,sBAAsBqB,EAAWhB,GAGhC,OADaA,EAAMgB,EACLnB,KAAKC,UDzBpBH,cACCsB,MAAM,GAGPtB,yBACC,MAAO,CACNuB,SAAU,EACVC,UAAW,GAIbxB,kBAAkByB,EAAaC,GAG9B,OAFAD,EAAYF,UAAYG,EAAehB,MAAMa,SAC7CE,EAAYD,YACLC,EAGRzB,YAAY2B,EAAeC,GAE1B,MAAMC,GAAgBD,EAAcD,GAAiB,IAAO,GAC5DzB,KAAK4B,SAAS,CAAEP,SAAUM,GAAgBD,GAC1C,MAAMlB,EAAQR,KAAK6B,eAAeH,GAElC,OAAOlB,EAAMc,UAAYd,EAAMa,UAIjCS,KAAKC,SAASC,KAAKC,IAElB,IAAIC,EFlCuB,EEmCvBC,OAAaC,EACbC,EAAc,IAAIxC,EAEtB,MAAMyC,EAAe,KACpB,GFxC0B,IEwCtBJ,EAA6B,CAChC,MAAMK,EAAYnC,YAAYD,MACxBqC,EAASP,EAASQ,WAClBC,EAAUtC,YAAYD,MACtBK,EAAQ6B,EAAYM,YAAYJ,EAAWG,GACjDP,EAAa9C,EAAUiD,GACvB3C,YAAY,CACXiD,MAAOV,EACP1B,MAAOA,EAIPgC,OAAQA,MAKXV,KAAKe,iBAAiB,UAAWC,IDRR/D,IAAAA,EDrDA,IE8DnB+D,EAAE9D,MF1DmB,IE0DKkD,IAC9BA,EF3DyB,EE4DzBG,EAAc,IAAIxC,EAClBsC,EAAa9C,EAAUiD,IFhED,IEkElBQ,EAAE9D,MF/DmB,IE+DIkD,IAC7BA,EF/DyB,ECgDFnD,ECgBZoD,EDhBsBzD,EAAYU,OAAOL,GCiBpDoD,OAAaC,KAIfzC,YAAY,CACXiD,MFrE0B"}