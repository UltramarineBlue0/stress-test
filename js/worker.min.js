const e=new MessageChannel,t=e.port1,s=e.port2,r=new Map;let n=0;t.onmessage=e=>{const t=e.data;if(r.has(t)){const e=r.get(t);r.delete(t),e()}};const o=e=>{if(!(e=>"function"==typeof e)(e))throw new Error("Not a function");const t=n;return++n,r.set(t,e),s.postMessage(t),t};importScripts("WasmTest.js");class a extends class{scores=[];constructor(e=1){this.maxDiff=60*e*1e3}addScore(e,t=performance.now()){this.scores.push({time:t,score:e})}static newInitialValue(){return 0}static accumulate(){return 0}calculateScore(e=performance.now()){for(;0!==(t=this.scores).size&&0!==t.length&&!this.isInsideSlidingWindow(this.scores[0].time,e);)this.scores.shift();var t;const s=this.constructor.newInitialValue();return this.scores.reduce(this.constructor.accumulate,s)}isInsideSlidingWindow(e,t){return t-e<this.maxDiff}}{constructor(){super(3)}static newInitialValue(){return{duration:0,iteration:0}}static accumulate(e,t){return e.duration+=t.score.duration,e.iteration++,e}getNewScore(e,t){const s=(t-e)/1e3/60;this.addScore({duration:s},t);const r=this.calculateScore(t);return r.iteration/r.duration}}self.Module().then(e=>{let t=5,s=void 0,n=new a;const i=()=>{if(4===t){const r=performance.now(),a=e._runTest(),c=performance.now(),u=n.getNewScore(r,c);s=o(i),postMessage({state:t,score:u,result:a})}};self.addEventListener("message",e=>{var c;0===e.data&&4!==t&&(t=4,n=new a,s=o(i)),1===e.data&&4===t&&(t=5,c=s,r.delete(c),s=void 0)}),postMessage({state:6})});
//# sourceMappingURL=worker.min.js.map
